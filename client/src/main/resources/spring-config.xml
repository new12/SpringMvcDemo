<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
      xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
       http://www.springframework.org/schema/security
         http://www.springframework.org/schema/security/spring-security.xsd">
       <context:annotation-config/>
       <context:property-placeholder location="classpath:resources.properties"/>

       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
              <property name="url" value="${db.url}"/>
              <property name="username" value="${db.username}"/>
              <property name="password" value="${db.password}"/>
              <property name="initialSize" value="${db.initialSize}"/>
              <property name="minIdle" value="${db.minIdle}"/>
              <property name="maxActive" value="${db.maxActive}"/>
              <property name="validationQuery" value="select 'adhoc'"/>
              <property name="testWhileIdle" value="true"/>
              <property name="testOnBorrow" value="true"/>
              <property name="testOnReturn" value="true"/>
              <property name="poolPreparedStatements" value="false"/>
       </bean>
       <bean id="clientTokenServices" class="org.springframework.security.oauth2.client.token.JdbcClientTokenServices">
              <constructor-arg ref="dataSource"/>
       </bean>
       <bean id="accessTokenProvider" class="org.springframework.security.oauth2.client.token.AccessTokenProviderChain">
              <property name="clientTokenServices" ref="clientTokenServices" />
              <constructor-arg>
                     <list>
                            <ref bean="authorizationCodeAccessTokenProvider"></ref>
                            <ref bean="implicitAccessTokenProvider"></ref>
                            <ref bean="resourceOwnerPasswordAccessTokenProvider"></ref>
                            <ref bean="ClientCredentialsAccessTokenProvider"></ref>
                     </list>
              </constructor-arg>
       </bean>
       <bean id="authorizationCodeAccessTokenProvider" class="org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider"></bean>
       <bean id="implicitAccessTokenProvider" class="org.springframework.security.oauth2.client.token.grant.implicit.ImplicitAccessTokenProvider"></bean>
       <bean id="resourceOwnerPasswordAccessTokenProvider" class="org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordAccessTokenProvider"></bean>
       <bean id="ClientCredentialsAccessTokenProvider" class="org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsAccessTokenProvider"></bean>

       <oauth:rest-template id="template" access-token-provider="accessTokenProvider" resource="demo"/>
       <oauth:resource client-id="test" type="authorization_code" id="demo" client-secret="secret" access-token-uri="${accessTokenUri}"
                       user-authorization-uri="${userAuthorizationUri}" scope="read,write"/>
       <oauth:client id="oauth2ClientFilter" />
        <security:http>
            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
            <security:form-login></security:form-login>
            <security:custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER" />
        </security:http>

        <security:authentication-manager>
            <security:authentication-provider>
                <security:user-service>
                    <security:user name="test" authorities="ROLE_USER" password="123" />
                </security:user-service>
            </security:authentication-provider>
        </security:authentication-manager>

    <bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <!-- 注意替换为对应的CASO服务，service要换成自己注册接入CASO时的应用地址-->
        <constructor-arg value="http://opssysdev03.dev.sh.ctripcorp.com:28080/caso/logout?service=http://localhost:8080/odb-syncer" />
        <constructor-arg>
            <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
        </constructor-arg>
        <property name="filterProcessesUrl" value="/j_spring_cas_security_logout" />
    </bean>
</beans>